








COM O INPUTOCONTAINER DEFINIDO, PODEMOS 


OUTSOURCEAR...








--> PARA ISSO, O PROFESSOR ESCREVE ASSIM (props.children):




import React from 'react';
import { StyleSheet, Text, View } from 'react-native';

type CardProps = {
  children: React.ReactNode;
};

const Card = (props: CardProps) => {
  return <View style={styles.card}>{props.children}</View>;
};

const styles = StyleSheet.create({
  card: {
    justifyContent: 'center',
    shadowColor: 'black',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowRadius: 6, // ONLY ON IOS
    shadowOpacity: 0.26,
    elevation: 6, // ONLY ON ANDROID (same as shadow properties, but simpler)...
    padding: 20,
    borderRadius: 10,
    backgroundColor: 'white',
  },
  title: {
    fontSize: 20,
  },
  description: {
    fontSize: 16,
  },
});

export default Card;











MAS QUEREMOS DEIXAR ESSE COMPONENT 1 POUCO MAIS FLEXÍVEL...







SERIA NICE PODER DEFINIRMOS OS STYLES DO LADO DE FORA,


POR MEIO DO SPREAD OPERATOR,


TIPO ASSIM:







import React from 'react';
import { StyleSheet, Text, View } from 'react-native';

type CardProps = {
  children: React.ReactNode;
  style?: any;
};

const Card = (props: CardProps) => {
  return (
    <View
      style={{
        ...styles.card,
        ...props.style,
      }}
    >
      {props.children}
    </View>
  );
};

const styles = StyleSheet.create({
  card: {
    justifyContent: 'center',
    shadowColor: 'black',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowRadius: 6, // ONLY ON IOS
    shadowOpacity: 0.26,
    elevation: 6, // ONLY ON ANDROID (same as shadow properties, but simpler)...
    padding: 20,
    borderRadius: 10,
    backgroundColor: 'white',
  },
  title: {
    fontSize: 20,
  },
  description: {
    fontSize: 16,
  },
});

export default Card;










certo...









AGORA PODEMOS USAR ESSE COMPONENT, LÁ NA NOSSA PAGE,

TIPO ASSIM:







import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { TextInput } from 'react-native-gesture-handler';
import Card from '@/components/Card';

const StartGameScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <TextInput placeholder="Enter a number" />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} />
          </View>
        </View>
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },








certo...







E ISSO FUNCIONOU...


