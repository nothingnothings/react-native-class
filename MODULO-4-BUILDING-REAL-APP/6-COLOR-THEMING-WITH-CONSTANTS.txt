






--> ok...

O PROFESSOR CONSERTA OS BUTTONS,

FAZ COM QUE TENHAMOS O MESMO TAMANHO, TIPO ASSIM:




  button: {
    width: '40%',
  },


AÍ O WRAPPER,

TIPO ASSIM:







        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} />
          </View>
        </View>














PARA MUDAR A COLOR DO BUTTON ELEMENT,

TEMOS O PROP 'color'...

(em vez de style)....






PARA ISSO, O PROFESSOR ESCREVE ASSIM:






        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color="red" />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color="blue" />
          </View>
        </View>









mas queremos evitar 

repetição de código...







-> PARA ISSO,

VAMOS DEFINIR 1 THEME,

PARA NOSSO APP INTEIRO...






--> PARA ISSO,

O PROFESSOR 



CRIA 1 NOVO FOLDER,

 NO LEVEL 'root',

 DE NOME 'constants'...





 --> DENTRO DALI,


 CRIAR O ARQUIVO 'colors.ts'...








 vamos exportar por default 1 object javascript,


 com 



 properties tipo assim:





 /**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

export default {
  primary: '#f7287b',
  accent: '#c717fc',
};













aí escrevemos assim:









import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { TextInput } from 'react-native-gesture-handler';
import Card from '@/components/Card';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <TextInput placeholder="Enter a number" />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};









PODEMOS FAZER A MESMA COISA NO HEADER,

TIPO ASSIM:






import Colors from '@/constants/Colors';
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';

type HeaderProps = {
  title: string;
};

const Header = (props: HeaderProps) => {
  return (
    <View style={styles.header}>
      <Text style={styles.headerTitle}>{props.title}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  header: {
    width: '100%',
    height: 90,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 36,
    backgroundColor: Colors.primary,
  },
  headerTitle: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
  },
});

export default Header;



















CERTO... perfeito...


TAMBÉM PODEMOS FAZER A MESMA COISA COM SPACING,

POR EXEMPLO...