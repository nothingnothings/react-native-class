




DEVEMOS MELHORAR O INPUT FIELD,


O TEXTINPUT...





--> PARA ISSO,



VAMOS FAZER ISSO EM 1 COMPONENT SEPARADO,
TIPO ASSIM:





import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { TextInput } from 'react-native-gesture-handler';

type InputProps = {
  children: React.ReactNode;
  style?: any;
};

const Input = (props: InputProps) => {
  return (
    <TextInput
      style={{
        ...styles.input,
        ...props.style,
      }}
    />
  );
};

const styles = StyleSheet.create({
  input: {
    height: 30,
    borderWidth: 1,
    borderBottomColor: 'grey',
    borderBottomWidth: 1,
    marginVertical: 10,
  },
});

export default Input;











CERTO... 


AÍ USAMOS ISSO NA SCREEN,

TIPO ASSIM:






import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <Input style={styles.input} />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;







CERTO...






--> TAMBÉM SERIA LEGAL DEIXAR O TEXT DO INPUT CENTRALIZADO,

    POR ISSO O PROFESSOR ESCREVE ASSIM:






import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <Input style={styles.input} />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;












certo...







AGORA QUEREMOS CONFIGURAR ESSE INPUT,


FAZER COM QUE APENAS NUMBERS 

SEJAM ACEITOS....





--> PODEMOS FAZER ISSO COM PROPS...






--> PODEMOS FAZER TIPO ASSIM:





const Input = (props: InputProps) => {
  return (
    <TextInput
      style={{
        ...styles.input,
        ...props.style,
      }}
      keyboardType="numeric"
      placeholder="Enter a Number"
    />
  );
};








MAS QUEREMOS DEFINIR ESSAS CONFIGS DO LADO DE FORA,



NO PARENT COMPONENT,

POR ISSO USAMOS {...props},

TIPO ASSIM:









const StartGameScreen = () => {
  const navigation = useNavigation();

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <Input
          style={styles.input}
          keyboardType="numeric"
          blurOnSubmit
          autoCapitalize="none"
          autoCorrect={false}
          maxLength={2}
        />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};









queremos evitar decimals,

também..





--> por isso deixamos o type do keyboard como 'number-pad',

em vez de 'numeric'...








EX:




        <Input
          style={styles.input}
          keyboardType="number-pad"
          blurOnSubmit
          autoCapitalize="none"
          autoCorrect={false}
          maxLength={2}
        />











    CERTO...





mas 'number-pad'

NÃO FUNCIONA 



NO ANDROID... VC AINDA PODE ADICIONAR DECIMAL PLACES... TEMOS QUE 

ENCONTRAR 1 FIX DIFERENTE...