









OK.. COMEÇAMOS A TRABALHAR NO INPUT,


MAS QUEREMOS GARANTIR QUE USERS SÓ CONSIGAM 



ENTER NUMBERS QUE SÃO DIGIT ONLY,



SEM DEIXAR COLAREM OUTRAS COISAS,

INPUTTAR STRINGS OU DECIMALS...







--> PARA ISSO,



''WE NEED TO SAVE THE VALUE THE 

USER INPUTTED, ON EVERY KEYSTROKE,

FEED IT BACK TO THE INPUT,
BUT 

ALSO VALIDATE THE VALUE,


TO ENSURE IT IS A NUMBER'...








--> PARA ISSO, PRECISAMOS FAZER MANAGE DE STATE 


NO 'StartGameScreen,'


tipo assim:







import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const [enteredValue, setEnteredValue] = React.useState('');

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <Input
          style={styles.input}
          keyboardType="number-pad"
          blurOnSubmit
          autoCapitalize="none"
          autoCorrect={false}
          maxLength={2}
        />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;













CERTO...









DEPOIS DISSO, 

DEVEMOS ADICIONAR 1 FUNCTIONM,

TIPO ASSIM:









import React from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const [enteredValue, setEnteredValue] = React.useState('');

  const numberInputHandler = (enteredNumber: string) => {
    setEnteredValue(enteredNumber);
  };

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Start a New Game!</Text>
      <Card style={styles.inputContainer}>
        <Text>Select a Number!</Text>
        <Input
          style={styles.input}
          keyboardType="number-pad"
          blurOnSubmit
          autoCapitalize="none"
          autoCorrect={false}
          maxLength={2}
          onChangeText={(text) => numberInputHandler(text)}
          value={enteredValue}
        />
        <View style={styles.buttonContainer}>
          <View style={[styles.button, styles.resetButton]}>
            <Button title="Reset" onPress={() => {}} color={Colors.accent} />
          </View>
          <View style={[styles.button, styles.confirmButton]}>
            <Button title="Confirm" onPress={() => {}} color={Colors.primary} />
          </View>
        </View>
      </Card>
    </View>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;










agora precisamos VALIDATE O INPUT, ANTES 


DE DEFINIRMOS ESSE VALUE COMO SENDO ELE...










--> POR ISSO ESCREVEMOS ASSIM:




  const numberInputHandler = (enteredNumber: string) => {
    setEnteredValue(enteredNumber.replace(/[^0-9]/g, ''));
  };









COM ISSO, VAMOS SUBSTITUIR QUAISQUER VALUES NON-NUMBER 


POR 1 EMPTY STRING...











COM ISSO, NO ANDROID,


SÓ VALUES NUMÉRICOS SÃO ACEITOS... PERFEITO...






--> MAS AINDA NÃO ACABAMOS COM O INPUT...








--> PQ, NO iOS,

se estamos 

NO INPUT MODE,

NÃO É POSSÍVEL


CLICAR FORA DO 



INPUT FIELD (na pagina)
PARA 

FECHÁ-LO...








--> PARA CONSEGUIR 
    PERMITIR AO USER ISSO,


    O PROFESSOR WRAPPA A VIEW INTEIRA DE 'StartGameScreen'


    COM 1 COMPONENT ESPECIAL,

    CHAMADO DE 'TouchableWithoutFeedback'...






->  ISSO NOS DEIXA 'REGISTER A LISTENER WITHOUT ANY VISUAL
 FEEDBACK'' 

 (justamente para conseguirmos fechar o input keyboard, a partir de 
 touches na page em si)...







--> TIPO ASSIM:




import React from 'react';
import {
  StyleSheet,
  Text,
  View,
  Button,
  TouchableWithoutFeedback,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const [enteredValue, setEnteredValue] = React.useState('');

  const numberInputHandler = (enteredNumber: string) => {
    setEnteredValue(enteredNumber.replace(/[^0-9]/g, ''));
  };

  return (
    <TouchableWithoutFeedback onPress={() => {}}>
      <View style={styles.screen}>
        <Text style={styles.title}>Start a New Game!</Text>
        <Card style={styles.inputContainer}>
          <Text>Select a Number!</Text>
          <Input
            style={styles.input}
            keyboardType="number-pad"
            blurOnSubmit
            autoCapitalize="none"
            autoCorrect={false}
            maxLength={2}
            onChangeText={(text) => numberInputHandler(text)}
            value={enteredValue}
          />
          <View style={styles.buttonContainer}>
            <View style={[styles.button, styles.resetButton]}>
              <Button title="Reset" onPress={() => {}} color={Colors.accent} />
            </View>
            <View style={[styles.button, styles.confirmButton]}>
              <Button
                title="Confirm"
                onPress={() => {}}
                color={Colors.primary}
              />
            </View>
          </View>
        </Card>
      </View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;











CERTO... AGORA, QUANDO 1 PRESS ACONTECER,

VAMOS QUERER 'DISMISS THE KEYBOARD'...



PARA FAZER ISSO,


O REACT-NATIVE NOS OFERECE UMA API ÚTIL,

QUE É 


'Keyboard'...







ISSO NÃO É UM COMPONENT,

E SIM UMA API,


COM QUE PODEMOS INTERAGIR COM 1 PEDAÇO DO APARELHO EM SI...









--> COM ISSO,
USAMOS ASSIM:







import React from 'react';
import {
  StyleSheet,
  Text,
  View,
  Button,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';

import Card from '@/components/Card';
import Input from '@/components/Input';

import Colors from '@/constants/Colors';

const StartGameScreen = () => {
  const [enteredValue, setEnteredValue] = React.useState('');

  const numberInputHandler = (enteredNumber: string) => {
    setEnteredValue(enteredNumber.replace(/[^0-9]/g, ''));
  };

  return (
    <TouchableWithoutFeedback onPress={() => {
      Keyboard.dismiss(); // Hides the keyboard when the user taps outside the input field
    }}>
      <View style={styles.screen}>
        <Text style={styles.title}>Start a New Game!</Text>
        <Card style={styles.inputContainer}>
          <Text>Select a Number!</Text>
          <Input
            style={styles.input}
            keyboardType="number-pad"
            blurOnSubmit
            autoCapitalize="none"
            autoCorrect={false}
            maxLength={2}
            onChangeText={(text) => numberInputHandler(text)}
            value={enteredValue}
          />
          <View style={styles.buttonContainer}>
            <View style={[styles.button, styles.resetButton]}>
              <Button title="Reset" onPress={() => {}} color={Colors.accent} />
            </View>
            <View style={[styles.button, styles.confirmButton]}>
              <Button
                title="Confirm"
                onPress={() => {}}
                color={Colors.primary}
              />
            </View>
          </View>
        </Card>
      </View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    marginVertical: 10,
  },
  inputContainer: {
    width: 300,
    maxWidth: '80%',
    alignItems: 'center',
  },
  input: {
    width: 50,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 20,
    flex: 1,
    paddingHorizontal: 15,
  },
  button: {
    width: '40%',
  },
  confirmButton: {
    backgroundColor: '#f7287b',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
  resetButton: {
    backgroundColor: '#cccccc',
    borderRadius: 10,
    padding: 10,
    margin: 10,
  },
});

export default StartGameScreen;










CERTO...

